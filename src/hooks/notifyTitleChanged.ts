import { Collection } from 'mongodb';
import { Clog, LOGLEVEL } from '@fdebijl/clog';
import { SendTweetV2Params } from 'twitter-api-v2';

import { Article, SeenArticle, TwitterError } from '../types';
import { makeStatusText, validateArticle } from '../util';
import { sendTweet } from '../twitter/sendTweet';

const clog = new Clog();

/**
 * Validates an incoming article from OpenTitles and sends out a tweet if all the data is congruent.
 *
 * @param {Article} article An article for the NOS as generated by the OpenTitles API.
 * @returns {Promise} Resolves with the text of the sent tweet if everything went smoothly, rejects with an instance of ERR if an error occurred or the data was invalid.
 */
export const notifyTitleChanged = async (article: Article, collection: Collection<SeenArticle>): Promise<TwitterError | string> => {
  try {
    debugger;
    const seenArticle = await validateArticle(collection, article);
    const text = await makeStatusText(article);
    const params: SendTweetV2Params = { text } satisfies SendTweetV2Params;

    // Reply to previous Tweet about this article, if it exists
    if (seenArticle) {
      clog.log('Found seen article for article ' + article.articleID, LOGLEVEL.DEBUG);
      params.reply = {
        in_reply_to_tweet_id: seenArticle.tweets[seenArticle.tweets.length - 1].status.id_str
      }
    } else {
      clog.log('Did not find seen article for article ' + article.articleID, LOGLEVEL.DEBUG);
    }

    await sendTweet(collection, params, article, seenArticle || undefined);
    return params.text as string;
  } catch (error) {
    clog.log('Error while notifying title change', LOGLEVEL.ERROR);
    clog.log(error, LOGLEVEL.ERROR);
    return error as TwitterError;
  }
}
